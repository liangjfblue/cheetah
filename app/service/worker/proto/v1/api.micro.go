// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

//protoc --proto_path=. --micro_out=. --go_out=. ./api.proto

package micro_srv_cheetah_worker

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Worker service

type WorkerService interface {
	//调度新任务
	StartJob(ctx context.Context, in *StartJobRequest, opts ...client.CallOption) (*StartJobRespond, error)
	//停止任务
	StopJob(ctx context.Context, in *StopJobRequest, opts ...client.CallOption) (*StopJobRespond, error)
	//重启任务
	RestartJob(ctx context.Context, in *RestartJobRequest, opts ...client.CallOption) (*RestartRespond, error)
	//上报任务进度
	JobProgress(ctx context.Context, in *JobProgressRequest, opts ...client.CallOption) (Worker_JobProgressService, error)
}

type workerService struct {
	c    client.Client
	name string
}

func NewWorkerService(name string, c client.Client) WorkerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "micro.srv.cheetah.worker"
	}
	return &workerService{
		c:    c,
		name: name,
	}
}

func (c *workerService) StartJob(ctx context.Context, in *StartJobRequest, opts ...client.CallOption) (*StartJobRespond, error) {
	req := c.c.NewRequest(c.name, "Worker.StartJob", in)
	out := new(StartJobRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerService) StopJob(ctx context.Context, in *StopJobRequest, opts ...client.CallOption) (*StopJobRespond, error) {
	req := c.c.NewRequest(c.name, "Worker.StopJob", in)
	out := new(StopJobRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerService) RestartJob(ctx context.Context, in *RestartJobRequest, opts ...client.CallOption) (*RestartRespond, error) {
	req := c.c.NewRequest(c.name, "Worker.RestartJob", in)
	out := new(RestartRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerService) JobProgress(ctx context.Context, in *JobProgressRequest, opts ...client.CallOption) (Worker_JobProgressService, error) {
	req := c.c.NewRequest(c.name, "Worker.JobProgress", &JobProgressRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &workerServiceJobProgress{stream}, nil
}

type Worker_JobProgressService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*JobProgressRespond, error)
}

type workerServiceJobProgress struct {
	stream client.Stream
}

func (x *workerServiceJobProgress) Close() error {
	return x.stream.Close()
}

func (x *workerServiceJobProgress) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workerServiceJobProgress) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workerServiceJobProgress) Recv() (*JobProgressRespond, error) {
	m := new(JobProgressRespond)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Worker service

type WorkerHandler interface {
	//调度新任务
	StartJob(context.Context, *StartJobRequest, *StartJobRespond) error
	//停止任务
	StopJob(context.Context, *StopJobRequest, *StopJobRespond) error
	//重启任务
	RestartJob(context.Context, *RestartJobRequest, *RestartRespond) error
	//上报任务进度
	JobProgress(context.Context, *JobProgressRequest, Worker_JobProgressStream) error
}

func RegisterWorkerHandler(s server.Server, hdlr WorkerHandler, opts ...server.HandlerOption) error {
	type worker interface {
		StartJob(ctx context.Context, in *StartJobRequest, out *StartJobRespond) error
		StopJob(ctx context.Context, in *StopJobRequest, out *StopJobRespond) error
		RestartJob(ctx context.Context, in *RestartJobRequest, out *RestartRespond) error
		JobProgress(ctx context.Context, stream server.Stream) error
	}
	type Worker struct {
		worker
	}
	h := &workerHandler{hdlr}
	return s.Handle(s.NewHandler(&Worker{h}, opts...))
}

type workerHandler struct {
	WorkerHandler
}

func (h *workerHandler) StartJob(ctx context.Context, in *StartJobRequest, out *StartJobRespond) error {
	return h.WorkerHandler.StartJob(ctx, in, out)
}

func (h *workerHandler) StopJob(ctx context.Context, in *StopJobRequest, out *StopJobRespond) error {
	return h.WorkerHandler.StopJob(ctx, in, out)
}

func (h *workerHandler) RestartJob(ctx context.Context, in *RestartJobRequest, out *RestartRespond) error {
	return h.WorkerHandler.RestartJob(ctx, in, out)
}

func (h *workerHandler) JobProgress(ctx context.Context, stream server.Stream) error {
	m := new(JobProgressRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.WorkerHandler.JobProgress(ctx, m, &workerJobProgressStream{stream})
}

type Worker_JobProgressStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*JobProgressRespond) error
}

type workerJobProgressStream struct {
	stream server.Stream
}

func (x *workerJobProgressStream) Close() error {
	return x.stream.Close()
}

func (x *workerJobProgressStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *workerJobProgressStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *workerJobProgressStream) Send(m *JobProgressRespond) error {
	return x.stream.Send(m)
}
